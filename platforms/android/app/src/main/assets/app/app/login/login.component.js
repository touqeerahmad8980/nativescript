"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var application_1 = require("tns-core-modules/application");
var forms_1 = require("@angular/forms");
var LoginComponent = /** @class */ (function () {
    function LoginComponent(fb) {
        this.fb = fb;
        this.buttonValue = true;
    }
    LoginComponent.prototype.ngOnInit = function () {
        this.loginForm = this.fb.group({
            email: ['', [forms_1.Validators.required, forms_1.Validators.email]],
            password: ['', [forms_1.Validators.required, forms_1.Validators.minLength(6)]]
        });
        // this.onTextChange();
    };
    LoginComponent.prototype.onTextChange = function () {
        alert(this.loginForm.valid);
        JSON.stringify(this.loginForm);
        if (this.loginForm.valid) {
            this.buttonValue = false;
        }
        else {
            this.buttonValue = true;
        }
    };
    Object.defineProperty(LoginComponent.prototype, "validate", {
        get: function () { return this.loginForm.controls; },
        enumerable: true,
        configurable: true
    });
    // constructor(private router: RouterExtensions,private service: sharedService ,page: Page) {
    //     page.actionBarHidden = true;
    //     this.input = {
    //         email: "",
    //         password: ""
    //     }
    // }
    // ngOnInit() {
    //     if(ApplicationSettings.getBoolean("authenticated", false)) {
    //         this.router.navigate(["/home"], { clearHistory: true });
    //     }
    // }
    LoginComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.drawer = application_1.getRootView();
            _this.drawer.gesturesEnabled = false;
        }, 100);
    };
    LoginComponent = __decorate([
        core_1.Component({
            selector: 'ns-login',
            templateUrl: './login.component.html',
            styleUrls: ['./login.component.css'],
            moduleId: module.id,
        }),
        __metadata("design:paramtypes", [forms_1.FormBuilder])
    ], LoginComponent);
    return LoginComponent;
}());
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9naW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWtEO0FBT2xELDREQUEyRDtBQUMzRCx3Q0FBcUY7QUFRckY7SUFRSSx3QkFBb0IsRUFBZTtRQUFmLE9BQUUsR0FBRixFQUFFLENBQWE7UUFGbkMsZ0JBQVcsR0FBVyxJQUFJLENBQUM7SUFLM0IsQ0FBQztJQUVELGlDQUFRLEdBQVI7UUFFSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQzNCLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFVLENBQUMsUUFBUSxFQUFFLGtCQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDcEQsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQVUsQ0FBQyxRQUFRLEVBQUUsa0JBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqRSxDQUFDLENBQUM7UUFFSCx1QkFBdUI7SUFFM0IsQ0FBQztJQUVELHFDQUFZLEdBQVo7UUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvQixJQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFDO1lBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQzVCO2FBQUk7WUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztTQUMzQjtJQUNMLENBQUM7SUFFRCxzQkFBSSxvQ0FBUTthQUFaLGNBQWlCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQXVDbEQsNkZBQTZGO0lBQzdGLG1DQUFtQztJQUNuQyxxQkFBcUI7SUFDckIscUJBQXFCO0lBQ3JCLHVCQUF1QjtJQUN2QixRQUFRO0lBQ1IsSUFBSTtJQUVKLGVBQWU7SUFDZixtRUFBbUU7SUFDbkUsbUVBQW1FO0lBQ25FLFFBQVE7SUFDUixJQUFJO0lBR04sd0NBQWUsR0FBZjtRQUFBLGlCQUtHO1FBSkMsVUFBVSxDQUFDO1lBQ1AsS0FBSSxDQUFDLE1BQU0sR0FBa0IseUJBQVcsRUFBRSxDQUFDO1lBQzNDLEtBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztRQUN4QyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDVixDQUFDO0lBN0ZRLGNBQWM7UUFOMUIsZ0JBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFdBQVcsRUFBRSx3QkFBd0I7WUFDckMsU0FBUyxFQUFFLENBQUMsdUJBQXVCLENBQUM7WUFDcEMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1NBQ3BCLENBQUM7eUNBUzBCLG1CQUFXO09BUjFCLGNBQWMsQ0FnSDFCO0lBQUQscUJBQUM7Q0FBQSxBQWhIRCxJQWdIQztBQWhIWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbi8vIGltcG9ydCB7UGFnZX0gZnJvbSBcInVpL3BhZ2VcIjtcclxuLy8gaW1wb3J0IHsgUm91dGVyRXh0ZW5zaW9ucyB9IGZyb20gJ25hdGl2ZXNjcmlwdC1hbmd1bGFyL3JvdXRlcic7XHJcbi8vIGltcG9ydCB7IFNuYWNrQmFyIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1zbmFja2JhclwiO1xyXG4vLyBpbXBvcnQgKiBhcyBBcHBsaWNhdGlvblNldHRpbmdzIGZyb20gXCJhcHBsaWNhdGlvbi1zZXR0aW5nc1wiO1xyXG4vLyBpbXBvcnQgeyBzaGFyZWRTZXJ2aWNlIH0gZnJvbSBcIi4uL3NoYXJlZC9zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IFJhZFNpZGVEcmF3ZXJ9IGZyb20gXCJuYXRpdmVzY3JpcHQtdWktc2lkZWRyYXdlclwiO1xyXG5pbXBvcnQgeyBnZXRSb290VmlldyB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2FwcGxpY2F0aW9uXCI7XHJcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgRm9ybUdyb3VwLCBGb3JtQnVpbGRlciwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbnMtbG9naW4nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9sb2dpbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vbG9naW4uY29tcG9uZW50LmNzcyddLFxyXG4gIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMb2dpbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgXHJcbiAgICBsb2dpbkZvcm06IEZvcm1Hcm91cDtcclxuICAgIGVtYWlsOiBBYnN0cmFjdENvbnRyb2w7XHJcbiAgICBwYXNzd29yZDogQWJzdHJhY3RDb250cm9sO1xyXG4gICAgYnV0dG9uVmFsdWU6Ym9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBmYjogRm9ybUJ1aWxkZXIpIHtcclxuXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcblxyXG4gICAgICAgIHRoaXMubG9naW5Gb3JtID0gdGhpcy5mYi5ncm91cCh7XHJcbiAgICAgICAgICAgIGVtYWlsOiBbJycsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLmVtYWlsXV0sXHJcbiAgICAgICAgICAgIHBhc3N3b3JkOiBbJycsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLm1pbkxlbmd0aCg2KV1dXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHRoaXMub25UZXh0Q2hhbmdlKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG9uVGV4dENoYW5nZSgpe1xyXG4gICAgICAgIGFsZXJ0KHRoaXMubG9naW5Gb3JtLnZhbGlkKTtcclxuICAgICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLmxvZ2luRm9ybSk7XHJcbiAgICAgICAgaWYodGhpcy5sb2dpbkZvcm0udmFsaWQpe1xyXG4gICAgICAgICAgICB0aGlzLmJ1dHRvblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uVmFsdWUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmFsaWRhdGUoKSB7IHJldHVybiB0aGlzLmxvZ2luRm9ybS5jb250cm9sczsgfVxyXG5cclxuICAgIC8vIG9uU3VibWl0KCkge1xyXG4gICAgLy8gICAgIGFsZXJ0KGBidXR0b246ICR7dGhpcy5idXR0b25WYWx1ZX1gKTtcclxuICAgIC8vICAgICBhbGVydChgQ29udGFjdCBmb3JtIHZhbGlkOiAke3RoaXMubG9naW5Gb3JtLmludmFsaWR9YCk7XHJcbiAgICAvLyAgICAgYWxlcnQoYENvbnRhY3QgZm9ybSB1bnRvdWNoZWQ6ICR7dGhpcy5sb2dpbkZvcm0udW50b3VjaGVkfWApO1xyXG4gICAgLy8gICAgIGFsZXJ0KGBDb250YWN0IGZvcm0gdG91Y2hlZDogJHt0aGlzLmxvZ2luRm9ybS50b3VjaGVkfWApO1xyXG4gICAgLy8gICAgIGFsZXJ0KGBDb250YWN0IGZvcm0gdmFsdWU6ICR7SlNPTi5zdHJpbmdpZnkodGhpcy5sb2dpbkZvcm0udmFsdWUpfWApO1xyXG4gICAgLy8gfVxyXG4gIFxyXG4vLyAgICAgc2lnblVwRm9ybTogRm9ybUdyb3VwOyAgICBcclxuLy8gICAgICBlbWFpbDpBYnN0cmFjdENvbnRyb2w7XHJcbi8vICAgICB1c2VybmFtZTpBYnN0cmFjdENvbnRyb2w7XHJcbi8vICAgICBidXR0b246Ym9vbGVhbjtcclxuLy8gY29uc3RydWN0b3IocHJpdmF0ZSBmb3JtQnVpbGRlcjpGb3JtQnVpbGRlcil7ICBcclxuLy8gICAgICB0aGlzLnNpZ25VcEZvcm0gPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcclxuLy8gICAgICAgICBlbWFpbDogW1wiXCIsVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbi8vICAgICAgICAgdXNlcm5hbWU6W1wiXCIsVmFsaWRhdG9ycy5yZXF1aXJlZF0sXHJcbi8vICAgICAgIH0pO1xyXG4vLyB9XHJcblxyXG4vLyBvbkJ1dHRvblRhcCgpe1xyXG4vLyAgICAgYWxlcnQoSlNPTi5zdHJpbmdpZnkodGhpcy5zaWduVXBGb3JtLnZhbHVlKSk7XHJcbi8vIH1cclxuICBcclxuICBcclxuLy8gbmdPbkluaXQoKSB7XHJcbi8vICAgICB0aGlzLm9uQnV0dG9uVGFwKCk7XHJcbi8vICAgaWYoSlNPTi5zdHJpbmdpZnkodGhpcy5zaWduVXBGb3JtLnN0YXR1cykgPT0gXCJWQUxJRFwiICl7XHJcbi8vICAgICAgIHRoaXMuYnV0dG9uID0gZmFsc2U7XHJcbi8vICAgfWVsc2V7XHJcbi8vICAgICAgIHRoaXMuYnV0dG9uID0gdHJ1ZTtcclxuLy8gICB9XHJcbiAgXHJcbiAgICBwdWJsaWMgaW5wdXQ6IGFueTtcclxuICAgIHB1YmxpYyBkcmF3ZXI6IFJhZFNpZGVEcmF3ZXI7XHJcbiAgICB1c2VybmFtZTogYW55O1xyXG5cclxuICAgIFxyXG4gICAgLy8gY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlckV4dGVuc2lvbnMscHJpdmF0ZSBzZXJ2aWNlOiBzaGFyZWRTZXJ2aWNlICxwYWdlOiBQYWdlKSB7XHJcbiAgICAvLyAgICAgcGFnZS5hY3Rpb25CYXJIaWRkZW4gPSB0cnVlO1xyXG4gICAgLy8gICAgIHRoaXMuaW5wdXQgPSB7XHJcbiAgICAvLyAgICAgICAgIGVtYWlsOiBcIlwiLFxyXG4gICAgLy8gICAgICAgICBwYXNzd29yZDogXCJcIlxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuICAgIFxyXG4gICAgLy8gbmdPbkluaXQoKSB7XHJcbiAgICAvLyAgICAgaWYoQXBwbGljYXRpb25TZXR0aW5ncy5nZXRCb29sZWFuKFwiYXV0aGVudGljYXRlZFwiLCBmYWxzZSkpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW1wiL2hvbWVcIl0sIHsgY2xlYXJIaXN0b3J5OiB0cnVlIH0pO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuICAgIFxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5kcmF3ZXIgPSA8UmFkU2lkZURyYXdlcj5nZXRSb290VmlldygpO1xyXG4gICAgICAgICAgdGhpcy5kcmF3ZXIuZ2VzdHVyZXNFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgIH0sIDEwMCk7XHJcbiAgICB9XHJcblxyXG4vLyAgIGxvZ2luKCkge1xyXG4vLyAgICAgaWYodGhpcy5pbnB1dC5lbWFpbCAmJiB0aGlzLmlucHV0LnBhc3N3b3JkKSB7XHJcbi8vICAgICAgICAgbGV0IGFjY291bnQgPSBKU09OLnBhcnNlKEFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0U3RyaW5nKHRoaXMuaW5wdXQuZW1haWwsIFwie31cIikpO1xyXG4vLyAgICAgICAgIGlmKHRoaXMuaW5wdXQuZW1haWwgPT0gYWNjb3VudC5lbWFpbCAmJiB0aGlzLmlucHV0LnBhc3N3b3JkID09IGFjY291bnQucGFzc3dvcmQpIHtcclxuLy8gICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLnN0b3JhZ2UgPSBhY2NvdW50LmVtYWlsO1xyXG4vLyAgICAgICAgICAgICBBcHBsaWNhdGlvblNldHRpbmdzLnNldEJvb2xlYW4oXCJhdXRoZW50aWNhdGVkXCIsIHRydWUpO1xyXG4vLyAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXCIvaG9tZVwiXSwgeyBjbGVhckhpc3Rvcnk6IHRydWUgfSk7XHJcbi8vICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgKG5ldyBTbmFja0JhcigpKS5zaW1wbGUoXCJJbmNvcnJlY3QgQ3JlZGVudGlhbHMhXCIpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0gZWxzZSB7XHJcbi8vICAgICAgICAgKG5ldyBTbmFja0JhcigpKS5zaW1wbGUoXCJBbGwgRmllbGRzIFJlcXVpcmVkIVwiKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBhbGVydCh0aGlzLmlucHV0KTtcclxuLy8gICAgIGFsZXJ0KEpTT04uc3RyaW5naWZ5KHRoaXMudXNlcm5hbWUpKTtcclxuLy8gICB9XHJcbn1cclxuIl19