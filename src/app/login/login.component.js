"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var LoginComponent = /** @class */ (function () {
    function LoginComponent(formBuilder) {
        this.formBuilder = formBuilder;
        this.valid = "VALID";
        this.signUpForm = this.formBuilder.group({
            email: ["", forms_1.Validators.required],
            username: ["", forms_1.Validators.required],
        });
    }
    LoginComponent.prototype.onButtonTap = function () {
        alert(JSON.stringify(this.signUpForm.status));
    };
    //   constructor(private router: RouterExtensions,private service: sharedService ,page: Page) {
    //       page.actionBarHidden = true;
    //       this.input = {
    //         "email": "",
    //         "password": ""
    //     }
    //   }
    LoginComponent.prototype.ngOnInit = function () {
        if (JSON.stringify(this.signUpForm.status) == this.valid) {
            this.button = true;
        }
        else {
            this.button = false;
        }
        //   if(ApplicationSettings.getBoolean("authenticated", false)) {
        //     this.router.navigate(["/home"], { clearHistory: true });
    };
    LoginComponent = __decorate([
        core_1.Component({
            selector: 'ns-login',
            templateUrl: './login.component.html',
            styleUrls: ['./login.component.css'],
            moduleId: module.id,
        }),
        __metadata("design:paramtypes", [forms_1.FormBuilder])
    ], LoginComponent);
    return LoginComponent;
}());
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9naW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWtEO0FBUWxELHdDQUFtRjtBQVFuRjtJQU9BLHdCQUFvQixXQUF1QjtRQUF2QixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUx6QyxVQUFLLEdBQUcsT0FBTyxDQUFDO1FBTWIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUN0QyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUMsa0JBQVUsQ0FBQyxRQUFRLENBQUM7WUFDL0IsUUFBUSxFQUFDLENBQUMsRUFBRSxFQUFDLGtCQUFVLENBQUMsUUFBUSxDQUFDO1NBQ2xDLENBQUMsQ0FBQztJQUNULENBQUM7SUFFRCxvQ0FBVyxHQUFYO1FBQ0ksS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFRRCwrRkFBK0Y7SUFDL0YscUNBQXFDO0lBQ3JDLHVCQUF1QjtJQUN2Qix1QkFBdUI7SUFDdkIseUJBQXlCO0lBQ3pCLFFBQVE7SUFDUixNQUFNO0lBRUosaUNBQVEsR0FBUjtRQUNFLElBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDckQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDdEI7YUFBSTtZQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1NBQ3ZCO1FBQ0QsaUVBQWlFO1FBQ2pFLCtEQUErRDtJQUMvRCxDQUFDO0lBeENRLGNBQWM7UUFOMUIsZ0JBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFdBQVcsRUFBRSx3QkFBd0I7WUFDckMsU0FBUyxFQUFFLENBQUMsdUJBQXVCLENBQUM7WUFDcEMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1NBQ3BCLENBQUM7eUNBUThCLG1CQUFXO09BUDlCLGNBQWMsQ0FzRTFCO0lBQUQscUJBQUM7Q0FBQSxBQXRFRCxJQXNFQztBQXRFWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7UGFnZX0gZnJvbSBcInVpL3BhZ2VcIjtcclxuaW1wb3J0IHsgUm91dGVyRXh0ZW5zaW9ucyB9IGZyb20gJ25hdGl2ZXNjcmlwdC1hbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IFNuYWNrQmFyIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1zbmFja2JhclwiO1xyXG5pbXBvcnQgKiBhcyBBcHBsaWNhdGlvblNldHRpbmdzIGZyb20gXCJhcHBsaWNhdGlvbi1zZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBzaGFyZWRTZXJ2aWNlIH0gZnJvbSBcIi4uL3NoYXJlZC9zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IFJhZFNpZGVEcmF3ZXJ9IGZyb20gXCJuYXRpdmVzY3JpcHQtdWktc2lkZWRyYXdlclwiO1xyXG5pbXBvcnQgeyBnZXRSb290VmlldyB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2FwcGxpY2F0aW9uXCI7XHJcbmltcG9ydCB7IFZhbGlkYXRvcnMsQWJzdHJhY3RDb250cm9sLCBGb3JtQnVpbGRlciwgRm9ybUdyb3VwfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25zLWxvZ2luJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vbG9naW4uY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2xvZ2luLmNvbXBvbmVudC5jc3MnXSxcclxuICBtb2R1bGVJZDogbW9kdWxlLmlkLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9naW5Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIFxyXG4gIHZhbGlkID0gXCJWQUxJRFwiO1xyXG4gICAgICBzaWduVXBGb3JtOiBGb3JtR3JvdXA7ICAgIFxyXG4gICAgIGVtYWlsOkFic3RyYWN0Q29udHJvbDtcclxuICAgIHVzZXJuYW1lOkFic3RyYWN0Q29udHJvbDtcclxuICAgIGJ1dHRvbjpib29sZWFuO1xyXG5jb25zdHJ1Y3Rvcihwcml2YXRlIGZvcm1CdWlsZGVyOkZvcm1CdWlsZGVyKXsgIFxyXG4gICAgIHRoaXMuc2lnblVwRm9ybSA9IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xyXG4gICAgICAgIGVtYWlsOiBbXCJcIixWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgICB1c2VybmFtZTpbXCJcIixWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgfSk7XHJcbn1cclxuXHJcbm9uQnV0dG9uVGFwKCl7XHJcbiAgICBhbGVydChKU09OLnN0cmluZ2lmeSh0aGlzLnNpZ25VcEZvcm0uc3RhdHVzKSk7XHJcbn1cclxuICBcclxuICBcclxuICBcclxucHVibGljIGlucHV0OiBhbnk7XHJcbiAgcHVibGljIGRyYXdlcjogUmFkU2lkZURyYXdlcjtcclxuICBcclxuXHJcbi8vICAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlckV4dGVuc2lvbnMscHJpdmF0ZSBzZXJ2aWNlOiBzaGFyZWRTZXJ2aWNlICxwYWdlOiBQYWdlKSB7XHJcbi8vICAgICAgIHBhZ2UuYWN0aW9uQmFySGlkZGVuID0gdHJ1ZTtcclxuLy8gICAgICAgdGhpcy5pbnB1dCA9IHtcclxuLy8gICAgICAgICBcImVtYWlsXCI6IFwiXCIsXHJcbi8vICAgICAgICAgXCJwYXNzd29yZFwiOiBcIlwiXHJcbi8vICAgICB9XHJcbi8vICAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGlmKEpTT04uc3RyaW5naWZ5KHRoaXMuc2lnblVwRm9ybS5zdGF0dXMpID09IHRoaXMudmFsaWQgKXtcclxuICAgICAgICB0aGlzLmJ1dHRvbiA9IHRydWU7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICB0aGlzLmJ1dHRvbiA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gICBpZihBcHBsaWNhdGlvblNldHRpbmdzLmdldEJvb2xlYW4oXCJhdXRoZW50aWNhdGVkXCIsIGZhbHNlKSkge1xyXG4gICAgLy8gICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtcIi9ob21lXCJdLCB7IGNsZWFySGlzdG9yeTogdHJ1ZSB9KTtcclxuICAgIH1cclxuICAgIFxyXG4vLyAgIH1cclxuXHJcbi8vICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4vLyAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuLy8gICAgICAgICAgIHRoaXMuZHJhd2VyID0gPFJhZFNpZGVEcmF3ZXI+Z2V0Um9vdFZpZXcoKTtcclxuLy8gICAgICAgICAgIHRoaXMuZHJhd2VyLmdlc3R1cmVzRW5hYmxlZCA9IGZhbHNlO1xyXG4vLyAgICAgICB9LCAxMDApO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICBwdWJsaWMgbG9naW4oKSB7XHJcbi8vICAgICBpZih0aGlzLmlucHV0LmVtYWlsICYmIHRoaXMuaW5wdXQucGFzc3dvcmQpIHtcclxuLy8gICAgICAgICBsZXQgYWNjb3VudCA9IEpTT04ucGFyc2UoQXBwbGljYXRpb25TZXR0aW5ncy5nZXRTdHJpbmcodGhpcy5pbnB1dC5lbWFpbCwgXCJ7fVwiKSk7XHJcbi8vICAgICAgICAgLy8gbGV0IGFjY291bnQgPSBKU09OLnBhcnNlKEFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0U3RyaW5nKFwiYWNjb3VudFwiLCBcInt9XCIpKTtcclxuLy8gICAgICAgICBpZih0aGlzLmlucHV0LmVtYWlsID09IGFjY291bnQuZW1haWwgJiYgdGhpcy5pbnB1dC5wYXNzd29yZCA9PSBhY2NvdW50LnBhc3N3b3JkKSB7XHJcbi8vICAgICAgICAgICAgIC8vIHRoaXMuc2VydmljZS5zdG9yYWdlID0gYWNjb3VudDtcclxuLy8gICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLnN0b3JhZ2UgPSBhY2NvdW50LmVtYWlsO1xyXG4vLyAgICAgICAgICAgICBBcHBsaWNhdGlvblNldHRpbmdzLnNldEJvb2xlYW4oXCJhdXRoZW50aWNhdGVkXCIsIHRydWUpO1xyXG4vLyAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXCIvaG9tZVwiXSwgeyBjbGVhckhpc3Rvcnk6IHRydWUgfSk7XHJcbi8vICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgKG5ldyBTbmFja0JhcigpKS5zaW1wbGUoXCJJbmNvcnJlY3QgQ3JlZGVudGlhbHMhXCIpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0gZWxzZSB7XHJcbi8vICAgICAgICAgKG5ldyBTbmFja0JhcigpKS5zaW1wbGUoXCJBbGwgRmllbGRzIFJlcXVpcmVkIVwiKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBhbGVydCh0aGlzLmlucHV0LmVtYWlsKTtcclxuLy8gICAgIGFsZXJ0KHRoaXMuaW5wdXQucGFzc3dvcmQpO1xyXG4vLyAgIH1cclxufVxyXG4iXX0=