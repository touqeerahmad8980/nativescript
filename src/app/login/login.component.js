"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var LoginComponent = /** @class */ (function () {
    function LoginComponent(formBuilder) {
        this.formBuilder = formBuilder;
        this.signUpForm = this.formBuilder.group({
            email: ["", forms_1.Validators.required],
            username: ["", forms_1.Validators.required],
        });
    }
    LoginComponent.prototype.onButtonTap = function () {
        alert(JSON.stringify(this.signUpForm.value));
    };
    //   constructor(private router: RouterExtensions,private service: sharedService ,page: Page) {
    //       page.actionBarHidden = true;
    //       this.input = {
    //         "email": "",
    //         "password": ""
    //     }
    //   }
    LoginComponent.prototype.ngOnInit = function () {
        this.onButtonTap();
        if (JSON.stringify(this.signUpForm.status) == "VALID") {
            this.button = false;
        }
        else {
            this.button = true;
        }
        //   if(ApplicationSettings.getBoolean("authenticated", false)) {
        //     this.router.navigate(["/home"], { clearHistory: true });
    };
    LoginComponent = __decorate([
        core_1.Component({
            selector: 'ns-login',
            templateUrl: './login.component.html',
            styleUrls: ['./login.component.css'],
            moduleId: module.id,
        }),
        __metadata("design:paramtypes", [forms_1.FormBuilder])
    ], LoginComponent);
    return LoginComponent;
}());
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9naW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWtEO0FBUWxELHdDQUFtRjtBQVFuRjtJQU1BLHdCQUFvQixXQUF1QjtRQUF2QixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUN0QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1lBQ3RDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBQyxrQkFBVSxDQUFDLFFBQVEsQ0FBQztZQUMvQixRQUFRLEVBQUMsQ0FBQyxFQUFFLEVBQUMsa0JBQVUsQ0FBQyxRQUFRLENBQUM7U0FDbEMsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVELG9DQUFXLEdBQVg7UUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQVFELCtGQUErRjtJQUMvRixxQ0FBcUM7SUFDckMsdUJBQXVCO0lBQ3ZCLHVCQUF1QjtJQUN2Qix5QkFBeUI7SUFDekIsUUFBUTtJQUNSLE1BQU07SUFFSixpQ0FBUSxHQUFSO1FBQ0ksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3JCLElBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sRUFBRTtZQUNsRCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztTQUN2QjthQUFJO1lBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDdEI7UUFDRCxpRUFBaUU7UUFDakUsK0RBQStEO0lBQy9ELENBQUM7SUF4Q1EsY0FBYztRQU4xQixnQkFBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFVBQVU7WUFDcEIsV0FBVyxFQUFFLHdCQUF3QjtZQUNyQyxTQUFTLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztZQUNwQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7U0FDcEIsQ0FBQzt5Q0FPOEIsbUJBQVc7T0FOOUIsY0FBYyxDQXNFMUI7SUFBRCxxQkFBQztDQUFBLEFBdEVELElBc0VDO0FBdEVZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtQYWdlfSBmcm9tIFwidWkvcGFnZVwiO1xyXG5pbXBvcnQgeyBSb3V0ZXJFeHRlbnNpb25zIH0gZnJvbSAnbmF0aXZlc2NyaXB0LWFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgU25hY2tCYXIgfSBmcm9tIFwibmF0aXZlc2NyaXB0LXNuYWNrYmFyXCI7XHJcbmltcG9ydCAqIGFzIEFwcGxpY2F0aW9uU2V0dGluZ3MgZnJvbSBcImFwcGxpY2F0aW9uLXNldHRpbmdzXCI7XHJcbmltcG9ydCB7IHNoYXJlZFNlcnZpY2UgfSBmcm9tIFwiLi4vc2hhcmVkL3NlcnZpY2VcIjtcclxuaW1wb3J0IHsgUmFkU2lkZURyYXdlcn0gZnJvbSBcIm5hdGl2ZXNjcmlwdC11aS1zaWRlZHJhd2VyXCI7XHJcbmltcG9ydCB7IGdldFJvb3RWaWV3IH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvYXBwbGljYXRpb25cIjtcclxuaW1wb3J0IHsgVmFsaWRhdG9ycyxBYnN0cmFjdENvbnRyb2wsIEZvcm1CdWlsZGVyLCBGb3JtR3JvdXB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbnMtbG9naW4nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9sb2dpbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vbG9naW4uY29tcG9uZW50LmNzcyddLFxyXG4gIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMb2dpbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgXHJcbiAgICBzaWduVXBGb3JtOiBGb3JtR3JvdXA7ICAgIFxyXG4gICAgIGVtYWlsOkFic3RyYWN0Q29udHJvbDtcclxuICAgIHVzZXJuYW1lOkFic3RyYWN0Q29udHJvbDtcclxuICAgIGJ1dHRvbjpib29sZWFuO1xyXG5jb25zdHJ1Y3Rvcihwcml2YXRlIGZvcm1CdWlsZGVyOkZvcm1CdWlsZGVyKXsgIFxyXG4gICAgIHRoaXMuc2lnblVwRm9ybSA9IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xyXG4gICAgICAgIGVtYWlsOiBbXCJcIixWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgICB1c2VybmFtZTpbXCJcIixWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgfSk7XHJcbn1cclxuXHJcbm9uQnV0dG9uVGFwKCl7XHJcbiAgICBhbGVydChKU09OLnN0cmluZ2lmeSh0aGlzLnNpZ25VcEZvcm0udmFsdWUpKTtcclxufVxyXG4gIFxyXG4gIFxyXG4gIFxyXG5wdWJsaWMgaW5wdXQ6IGFueTtcclxuICBwdWJsaWMgZHJhd2VyOiBSYWRTaWRlRHJhd2VyO1xyXG4gIFxyXG5cclxuLy8gICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlcjogUm91dGVyRXh0ZW5zaW9ucyxwcml2YXRlIHNlcnZpY2U6IHNoYXJlZFNlcnZpY2UgLHBhZ2U6IFBhZ2UpIHtcclxuLy8gICAgICAgcGFnZS5hY3Rpb25CYXJIaWRkZW4gPSB0cnVlO1xyXG4vLyAgICAgICB0aGlzLmlucHV0ID0ge1xyXG4vLyAgICAgICAgIFwiZW1haWxcIjogXCJcIixcclxuLy8gICAgICAgICBcInBhc3N3b3JkXCI6IFwiXCJcclxuLy8gICAgIH1cclxuLy8gICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgICB0aGlzLm9uQnV0dG9uVGFwKCk7XHJcbiAgICBpZihKU09OLnN0cmluZ2lmeSh0aGlzLnNpZ25VcEZvcm0uc3RhdHVzKSA9PSBcIlZBTElEXCIgKXtcclxuICAgICAgICB0aGlzLmJ1dHRvbiA9IGZhbHNlO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgdGhpcy5idXR0b24gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gICBpZihBcHBsaWNhdGlvblNldHRpbmdzLmdldEJvb2xlYW4oXCJhdXRoZW50aWNhdGVkXCIsIGZhbHNlKSkge1xyXG4gICAgLy8gICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtcIi9ob21lXCJdLCB7IGNsZWFySGlzdG9yeTogdHJ1ZSB9KTtcclxuICAgIH1cclxuICAgIFxyXG4vLyAgIH1cclxuXHJcbi8vICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4vLyAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuLy8gICAgICAgICAgIHRoaXMuZHJhd2VyID0gPFJhZFNpZGVEcmF3ZXI+Z2V0Um9vdFZpZXcoKTtcclxuLy8gICAgICAgICAgIHRoaXMuZHJhd2VyLmdlc3R1cmVzRW5hYmxlZCA9IGZhbHNlO1xyXG4vLyAgICAgICB9LCAxMDApO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICBwdWJsaWMgbG9naW4oKSB7XHJcbi8vICAgICBpZih0aGlzLmlucHV0LmVtYWlsICYmIHRoaXMuaW5wdXQucGFzc3dvcmQpIHtcclxuLy8gICAgICAgICBsZXQgYWNjb3VudCA9IEpTT04ucGFyc2UoQXBwbGljYXRpb25TZXR0aW5ncy5nZXRTdHJpbmcodGhpcy5pbnB1dC5lbWFpbCwgXCJ7fVwiKSk7XHJcbi8vICAgICAgICAgLy8gbGV0IGFjY291bnQgPSBKU09OLnBhcnNlKEFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0U3RyaW5nKFwiYWNjb3VudFwiLCBcInt9XCIpKTtcclxuLy8gICAgICAgICBpZih0aGlzLmlucHV0LmVtYWlsID09IGFjY291bnQuZW1haWwgJiYgdGhpcy5pbnB1dC5wYXNzd29yZCA9PSBhY2NvdW50LnBhc3N3b3JkKSB7XHJcbi8vICAgICAgICAgICAgIC8vIHRoaXMuc2VydmljZS5zdG9yYWdlID0gYWNjb3VudDtcclxuLy8gICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLnN0b3JhZ2UgPSBhY2NvdW50LmVtYWlsO1xyXG4vLyAgICAgICAgICAgICBBcHBsaWNhdGlvblNldHRpbmdzLnNldEJvb2xlYW4oXCJhdXRoZW50aWNhdGVkXCIsIHRydWUpO1xyXG4vLyAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXCIvaG9tZVwiXSwgeyBjbGVhckhpc3Rvcnk6IHRydWUgfSk7XHJcbi8vICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgKG5ldyBTbmFja0JhcigpKS5zaW1wbGUoXCJJbmNvcnJlY3QgQ3JlZGVudGlhbHMhXCIpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0gZWxzZSB7XHJcbi8vICAgICAgICAgKG5ldyBTbmFja0JhcigpKS5zaW1wbGUoXCJBbGwgRmllbGRzIFJlcXVpcmVkIVwiKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBhbGVydCh0aGlzLmlucHV0LmVtYWlsKTtcclxuLy8gICAgIGFsZXJ0KHRoaXMuaW5wdXQucGFzc3dvcmQpO1xyXG4vLyAgIH1cclxufVxyXG4iXX0=